import React, { useEffect, useState } from 'react';
import Confetti from 'react-confetti';

const useMouseClick = () => {
  const [clicked, setClicked] = useState(false);
  const [position, setPosition] = useState({
    x: 0,
    y: 0,
  });

  useEffect(() => {
    const clickHandler = (event: MouseEvent) => {
      setClicked(true);
      setPosition({
        x: event.clientX,
        y: event.clientY,
      });
      window.setTimeout(() => setClicked(false), 800);
    };

    document.body.addEventListener('click', clickHandler);

    return () => {
      document.body.removeEventListener('click', clickHandler);
    };
  }, []);

  return { clicked, position };
};

function drawShapes(ctx) {
  const confettiType = this.confettiType ?? Math.floor(Math.random() * 8);
  this.confettiType = confettiType;

  switch (confettiType) {
    case 0:
      return drawSolar(ctx);
    case 1:
      return drawArc(ctx);
    case 2:
      return drawVoid(ctx);
    default:
      confettiType % 3 === 0 ? drawStar(ctx) : drawDIM(ctx);
  }
}

export default function ConfettiClick() {
  const {
    clicked,
    position: { x, y },
  } = useMouseClick();

  return (
    <Confetti
      style={{ pointerEvents: 'none', zIndex: 999999 }}
      initialVelocityY={12}
      initialVelocityX={7}
      gravity={0.08}
      numberOfPieces={clicked ? 80 : 0}
      onConfettiComplete={(confetti) => confetti?.reset()}
      confettiSource={{ w: 0, h: 0, x, y }}
      drawShape={drawShapes}
    />
  );
}

function drawSolar(ctx) {
  ctx.fillStyle = '#ef641f';
  ctx.scale(0.75, 0.75);
  ctx.fill(
    new Path2D(
      `M16 0c0.048 0.075 0.251 0.372 0.352 0.538 2.684 4.423 5.587 8.705 8.413 13.036 1.151 1.761 2.203 3.58 2.756 5.642 0.979 3.648 0.121 6.809-2.485 9.516-1.323 1.373-2.845 2.447-4.649 3.099-0.145 0.057-0.314 0.099-0.49 0.119l-0.009 0.001c0.68-0.417 1.267-0.842 1.819-1.307l-0.022 0.018c3.055-2.659 3.664-6.317 1.632-9.829-1.873-3.241-4.007-6.317-6.035-9.46-0.414-0.637-0.816-1.277-1.23-1.925-0.056 0.032-0.115 0.046-0.137 0.082-2.382 3.8-4.994 7.447-7.231 11.336-1.45 2.519-1.648 5.084-0.157 7.663 0.777 1.341 1.892 2.361 3.21 3.161 0.13 0.078 0.294 0.113 0.398 0.311-1.355-0.415-2.533-1.040-3.561-1.845l0.024 0.018c-1.91-1.474-3.438-3.238-4.137-5.604-0.747-2.528-0.303-4.948 0.725-7.301 0.984-2.258 2.415-4.254 3.77-6.29 2.311-3.476 4.58-6.977 6.766-10.532 0.082-0.136 0.204-0.314 0.281-0.446z`
    )
  );
  ctx.fill(
    new Path2D(
      `M16 16.597c0.807 1.366 1.562 2.633 2.306 3.906 0.644 1.1 1.312 2.187 1.854 3.342 0.943 2.013 0.371 4.083-1.49 5.489-1.707 1.29-3.881 1.228-5.522-0.158-1.808-1.524-2.237-3.572-1.133-5.66 1.209-2.286 2.569-4.483 3.881-6.709 0.027-0.044 0.046-0.092 0.104-0.21z`
    )
  );
}

function drawArc(ctx) {
  ctx.fillStyle = '#79bbe7';
  ctx.scale(0.75, 0.75);
  ctx.fill(
    new Path2D(
      `M15.012 31.479c0-1.915 0-3.715 0-5.516 0-1.334-0.138-1.427-1.283-0.797q-3.851 2.118-7.691 4.248c-0.73 0.403-1.537 0.546-2.349 0.656-1.202 0.164-2.404 0.321-3.689 0.281 0.156-0.314 0.437-0.437 0.63-0.63 1.144-1.093 2.311-2.166 3.451-3.265 1.796-1.731 3.573-3.48 5.367-5.213 0.252-0.244 0.201-0.35-0.085-0.499-2-1.041-3.934-2.215-5.99-3.14-1.187-0.533-2.025-1.422-2.75-2.477 0.219-0.129 0.401-0.078 0.575-0.079 1.73 0 3.459 0.008 5.189 0 0.941 0 1.072-0.209 0.632-1.016-1.42-2.602-2.841-5.207-4.299-7.787-0.453-0.803-0.622-1.663-0.744-2.543-0.166-1.195-0.335-2.394-0.261-3.691 0.565 0.592 1.080 1.121 1.583 1.661q3.704 3.975 7.521 7.839c0.313 0.317 0.414 0.232 0.589-0.109 1.058-2.052 2.257-4.030 3.224-6.132 0.502-1.093 1.42-1.802 2.362-2.504 0.141 0.21 0.085 0.394 0.085 0.567 0 1.748 0 3.497 0 5.245 0 0.958 0.165 1.068 0.998 0.612q3.927-2.145 7.839-4.319c0.734-0.411 1.53-0.583 2.334-0.692 1.007-0.134 2.021-0.219 3.034-0.313 0.209-0.020 0.422 0 0.716 0-0.276 0.463-0.629 0.72-0.938 1.007q-4.216 3.927-8.312 7.976c-0.355 0.353-0.32 0.493 0.109 0.718 2.032 1.058 3.995 2.247 6.083 3.199 0.99 0.45 1.679 1.26 2.323 2.104 0.061 0.080 0.167 0.174 0.096 0.287s-0.233 0.072-0.352 0.072q-2.596 0-5.19 0c-0.2 0-0.4 0.008-0.601 0.010-0.445 0-0.557 0.229-0.364 0.599q0.682 1.311 1.393 2.596c1.061 1.929 2.136 3.848 3.192 5.78 0.546 0.999 0.606 2.123 0.752 3.217 0.092 0.593 0.145 1.278 0.145 1.974 0 0.196-0.004 0.391-0.012 0.585l0.001-0.028c-0.437-0.375-0.957-0.776-1.42-1.241-0.817-0.828-1.583-1.708-2.392-2.545-1.748-1.807-3.51-3.596-5.252-5.405-0.295-0.305-0.437-0.328-0.656 0.081-1.021 1.967-2.178 3.867-3.087 5.9-0.505 1.145-1.394 1.953-2.505 2.726zM16.020 13.082c-0.096 0.082-0.182 0.144-0.257 0.219-0.838 0.836-1.667 1.681-2.513 2.505-0.252 0.244-0.203 0.4 0.023 0.621q1.23 1.202 2.432 2.434c0.219 0.226 0.363 0.276 0.61 0.021 0.822-0.852 1.663-1.684 2.513-2.513 0.192-0.189 0.231-0.307 0.014-0.517-0.862-0.837-1.705-1.695-2.555-2.544-0.082-0.070-0.166-0.134-0.268-0.223z`
    )
  );
}

function drawVoid(ctx) {
  ctx.fillStyle = '#a371c2';
  ctx.scale(0.7, 0.7);
  ctx.fill(
    new Path2D(`M16,0C7.16,0,0,7.16,0,16s7.16,16,16,16c8.84,0,16-7.16,16-16S24.84,0,16,0z M10.74,3.18
        c0.88-0.4,1.81-0.68,2.78-0.84c0.96-0.18,1.89-0.23,2.87-0.23c0.97,0.02,1.96,0.16,2.93,0.43c0.96,0.27,1.93,0.74,2.73,1.28
        c1.64,1.08,3.05,2.54,4,4.28c0.96,1.75,1.4,3.71,1.42,5.61c0.02,1.9-0.32,3.8-1.12,5.53c-0.42,0.85-0.95,1.65-1.61,2.31
        c-0.67,0.66-1.48,1.16-2.34,1.43c0.73-0.52,1.34-1.16,1.8-1.87c0.45-0.72,0.79-1.49,0.99-2.31c0.45-1.61,0.48-3.32,0.29-4.96
        c-0.2-1.64-0.69-3.2-1.52-4.53c-0.82-1.34-1.97-2.49-3.3-3.35c-0.68-0.45-1.32-0.77-2.07-1c-0.73-0.24-1.51-0.37-2.31-0.43
        c-0.79-0.06-1.65-0.05-2.45,0.04c-0.8,0.08-1.59,0.23-2.37,0.49c-3.13,0.99-5.88,3.29-7.9,6.24C4.62,7.86,7.21,4.75,10.74,3.18z
         M21.88,16c0,3.25-2.63,5.88-5.88,5.88c-3.25,0-5.88-2.63-5.88-5.88s2.63-5.88,5.88-5.88C19.25,10.12,21.88,12.75,21.88,16z
         M20.77,28.38c-0.88,0.4-1.81,0.68-2.78,0.84c-0.96,0.18-1.89,0.23-2.87,0.23c-0.97-0.02-1.96-0.16-2.93-0.43
        c-0.96-0.27-1.93-0.74-2.73-1.28c-1.64-1.08-3.05-2.54-4-4.28c-0.96-1.75-1.4-3.71-1.42-5.61c-0.02-1.9,0.32-3.8,1.12-5.53
        c0.42-0.85,0.95-1.65,1.61-2.31c0.67-0.66,1.48-1.16,2.34-1.43c-0.73,0.52-1.34,1.16-1.8,1.87c-0.45,0.72-0.79,1.49-0.99,2.31
        c-0.45,1.61-0.48,3.32-0.29,4.96c0.2,1.64,0.69,3.2,1.52,4.53c0.82,1.34,1.97,2.49,3.3,3.35c0.68,0.45,1.32,0.77,2.07,1
        c0.73,0.24,1.51,0.37,2.31,0.43c0.79,0.06,1.65,0.05,2.45-0.04c0.8-0.08,1.59-0.23,2.37-0.49c3.13-0.99,5.88-3.29,7.9-6.24
        C26.9,23.69,24.31,26.8,20.77,28.38z`)
  );
}

function drawDIM(ctx) {
  ctx.scale(0.06, 0.06);
  ctx.fill(
    new Path2D(
      `m397.926 220.152-3.065-3.068-2.642-2.641-35.557-35.552-35.554-35.557-39.247-39.248-31.864-31.863-35.557 35.555 28.858 28.857 42.256 42.256 35.554 35.55-.002.002 35.556 35.557-35.556 35.555.002.002-28.898 28.896-42.213 42.211-35.557-35.555-35.553-35.554v.002l-32.822-32.821-2.735-2.736 39.913-39.916 31.197-31.197-35.553-35.553-35.557 35.553-35.557 35.556-35.553 35.557 35.556 35.555 35.558 35.554-.004.002 35.557 35.553 35.553 35.559 35.557 35.552 35.557-35.552 35.556-35.559 35.552-35.555 35.557-35.554 35.556-35.555z`
    )
  );
  ctx.fill(new Path2D(`m214.444 249.996 35.555 35.559 35.557-35.559-35.557-35.553z`));
}

function drawStar(ctx) {
  const numPoints = Math.random() * 2 + 4;
  const outerRadius = 12;
  const innerRadius = outerRadius / 2;
  ctx.beginPath();
  ctx.moveTo(0, 0 - outerRadius);
  ctx.scale(0.75, 0.75);

  for (let n = 1; n < numPoints * 2; n++) {
    const radius = n % 2 === 0 ? outerRadius : innerRadius;
    const x = radius * Math.sin((n * Math.PI) / numPoints);
    const y = -1 * radius * Math.cos((n * Math.PI) / numPoints);
    ctx.lineTo(x, y);
  }
  ctx.fill();
  ctx.closePath();
}
